// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mixem_rcpp
List mixem_rcpp(const arma::mat& L, const arma::vec& w, const arma::vec& z, const arma::vec& x0, const arma::vec& eps, int numiter, double zerothresholdsolution, bool verbose);
RcppExport SEXP _mixsqp_mixem_rcpp(SEXP LSEXP, SEXP wSEXP, SEXP zSEXP, SEXP x0SEXP, SEXP epsSEXP, SEXP numiterSEXP, SEXP zerothresholdsolutionSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type numiter(numiterSEXP);
    Rcpp::traits::input_parameter< double >::type zerothresholdsolution(zerothresholdsolutionSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mixem_rcpp(L, w, z, x0, eps, numiter, zerothresholdsolution, verbose));
    return rcpp_result_gen;
END_RCPP
}
// mixsqp_rcpp
List mixsqp_rcpp(const arma::mat& L, const arma::mat& U, const arma::mat& V, const arma::vec& w, const arma::vec& z, const arma::vec& x0, bool usesvd, bool runem, double convtolsqp, double convtolactiveset, double zerothresholdsolution, double zerothresholdsearchdir, double suffdecr, double stepsizereduce, double minstepsize, double identitycontribincrease, const arma::vec& eps, int maxitersqp, int maxiteractiveset, bool verbose);
RcppExport SEXP _mixsqp_mixsqp_rcpp(SEXP LSEXP, SEXP USEXP, SEXP VSEXP, SEXP wSEXP, SEXP zSEXP, SEXP x0SEXP, SEXP usesvdSEXP, SEXP runemSEXP, SEXP convtolsqpSEXP, SEXP convtolactivesetSEXP, SEXP zerothresholdsolutionSEXP, SEXP zerothresholdsearchdirSEXP, SEXP suffdecrSEXP, SEXP stepsizereduceSEXP, SEXP minstepsizeSEXP, SEXP identitycontribincreaseSEXP, SEXP epsSEXP, SEXP maxitersqpSEXP, SEXP maxiteractivesetSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< bool >::type usesvd(usesvdSEXP);
    Rcpp::traits::input_parameter< bool >::type runem(runemSEXP);
    Rcpp::traits::input_parameter< double >::type convtolsqp(convtolsqpSEXP);
    Rcpp::traits::input_parameter< double >::type convtolactiveset(convtolactivesetSEXP);
    Rcpp::traits::input_parameter< double >::type zerothresholdsolution(zerothresholdsolutionSEXP);
    Rcpp::traits::input_parameter< double >::type zerothresholdsearchdir(zerothresholdsearchdirSEXP);
    Rcpp::traits::input_parameter< double >::type suffdecr(suffdecrSEXP);
    Rcpp::traits::input_parameter< double >::type stepsizereduce(stepsizereduceSEXP);
    Rcpp::traits::input_parameter< double >::type minstepsize(minstepsizeSEXP);
    Rcpp::traits::input_parameter< double >::type identitycontribincrease(identitycontribincreaseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxitersqp(maxitersqpSEXP);
    Rcpp::traits::input_parameter< int >::type maxiteractiveset(maxiteractivesetSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mixsqp_rcpp(L, U, V, w, z, x0, usesvd, runem, convtolsqp, convtolactiveset, zerothresholdsolution, zerothresholdsearchdir, suffdecr, stepsizereduce, minstepsize, identitycontribincrease, eps, maxitersqp, maxiteractiveset, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mixsqp_mixem_rcpp", (DL_FUNC) &_mixsqp_mixem_rcpp, 8},
    {"_mixsqp_mixsqp_rcpp", (DL_FUNC) &_mixsqp_mixsqp_rcpp, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_mixsqp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
